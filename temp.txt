import java.io.*;
import java.util.*;
public class Solution {
    
    public static String words[];
    public static String workSpace[];
    
    public static void main(String args[] ){
        Scanner myScanner = new Scanner(System.in);
        int length = Integer.parseInt(myScanner.nextLine().trim());//1-25
        words = new String[length];
        for(int i=0;i<length;i++){
            words[i]=myScanner.nextLine().trim();
        }
        //sort words[]
       
        recursiveSort(0,words.length-1);
        //print words[]
        for(int i=0;i<length;i++){
            System.out.println(words[i]);
        }
        
        

    }
    
    public static void recursiveSort( int left, int right){
        
         if(right-left<=7){
             insertionsort(left, right);  
             return;  
         }
        
        
        int mid = (left+right)/2;
        if( right-left<=0){
            return;
        }
        recursiveSort(left,mid);
        recursiveSort(mid+1,right);
        //System.out.println("left:"+left);
        //System.out.println("right:"+right);
        //System.out.println("to merge:"+Arrays.toString(words));
      
      //  System.out.println("after merge:"+Arrays.toString(words));
        
        
        //merge
       
        workSpace = new String[words.length];
        
        int i1 =left;
        int i2 =mid+1;
        
        if(compare(words[mid],words[mid+1])){
            return;
        }
        
        for(int i=0;i<words.length;i++){
           workSpace[i]=words[i]; 
        }
        
        for(int curr=left;curr<=right;curr++){
            if(i1>mid){
                words[curr]=workSpace[i2++];
            }else if(i2>right){
                words[curr]=workSpace[i1++];
            }else if(compare(workSpace[i1],workSpace[i2])){//"three">"nine"
                words[curr]=workSpace[i1++];
            }else{
                words[curr]=workSpace[i2++];
            }
        }
        
        
        return;
    }
    
     public static void insertionsort(int left, int right) {
        for (int outer = left; outer <= right; outer++) {
            String temp=words[outer];
            int inner = outer;
            while(inner>0&& compare(temp,words[inner -1])){
                words[inner]=words[inner-1];
                inner--;
            }
            words[inner]=temp;
        }
    }
  
    
    public static boolean compare(String a,String b){//"nine > seven " "two"<"nine" return true 
        int len1 = a.length();
        int len2 = b.length();
       
        if(len1<len2){
            int k = 0;
        while (k < len1) {
            char c1 = a.charAt(len1-1-k);
            char c2 = b.charAt(len2-1-k);
            
            if (c1 > c2) {
                return false;
            }
            
            if (c1 < c2) {
                return true;
            }
            
            k++;
        }
            return true;
        }else{
            int k = 0;
        while (k < len2) {
            char c1 = a.charAt(len1-1-k);
            char c2 = b.charAt(len2-1-k);
            
            if (c1 > c2) {
                return false;
            }
            
            if (c1 < c2) {
                return true;
            }
            
            k++;
        }
            return false;
        }

   
    }
               
}